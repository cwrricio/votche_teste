import React, { useState, useEffect, useRef } from "react";
import { Routes, Route, useNavigate, Navigate, useLocation } from "react-router-dom";
import "./App.css";
import {
  getAuth,
  signInWithPopup,
  signOut,
  GoogleAuthProvider,
} from "firebase/auth";
import {
  auth,
  googleProvider,
  getUserMeetings,
  getUserParticipatingMeetings,
  createNewMeeting,
  joinMeetingByPassword,
  archiveMeeting,
  getUserArchivedMeetings,
} from "./firebase";
import { v4 as uuidv4 } from "uuid";
import LandingPage from "./components/LandingPage";
import MeetingsList from "./components/MeetingsList";
import CreateMeeting from "./components/CreateMeeting";
import EnterMeeting from "./components/EnterMeeting";
import MeetingSession from "./components/MeetingSession";
import ArchivedMeetings from "./components/ArchivedMeetings";
import Sidebar from "./components/Sidebar";

function App() {
  const [user, setUser] = useState(null);
  const [showDropdown, setShowDropdown] = useState(false);
  const [activeMeeting, setActiveMeeting] = useState(null);
  const [meetings, setMeetings] = useState({ created: [], participating: [] });
  const [archivedMeetings, setArchivedMeetings] = useState([]);
  const [viewingArchived, setViewingArchived] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const [sidebarOpen, setSidebarOpen] = useState(true);
  
  const dropdownRef = useRef(null);
  const navigate = useNavigate();
  const location = useLocation();
  
  const isLandingPage = location.pathname === "/";
  
  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };

  // Verificar autenticaÃ§Ã£o e carregar reuniÃµes se o usuÃ¡rio estiver logado
  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged(async (authUser) => {
      console.log(
        "Estado de autenticaÃ§Ã£o detectado:",
        authUser ? `UsuÃ¡rio: ${authUser.displayName}` : "Nenhum usuÃ¡rio"
      );

      if (authUser) {
        console.log("Detalhes do usuÃ¡rio:", {
          uid: authUser.uid,
          email: authUser.email,
          nome: authUser.displayName,
          verificado: authUser.emailVerified,
        });
        setUser(authUser);

        // Carregar reuniÃµes quando o usuÃ¡rio faz login
        await loadUserMeetings(authUser.uid);

        // Restaurar a rota apÃ³s login bem-sucedido
        const savedPath = localStorage.getItem("authRedirectPath");
        if (savedPath) {
          localStorage.removeItem("authRedirectPath");
          navigate(savedPath);
        }
      } else {
        setUser(null);
        setShowDropdown(false);
        setActiveMeeting(null);
        setMeetings({ created: [], participating: [] });
      }
    });

    return () => unsubscribe();
  }, [navigate]);

  // FunÃ§Ã£o para carregar reuniÃµes do usuÃ¡rio
  const loadUserMeetings = async (userId) => {
    try {
      setIsLoading(true);
      setError("");

      // Carregar reuniÃµes criadas pelo usuÃ¡rio
      const created = await getUserMeetings(userId);

      // Carregar reuniÃµes que o usuÃ¡rio participa
      const participating = await getUserParticipatingMeetings(userId);

      setMeetings({ created, participating });
    } catch (error) {
      console.error("Erro ao carregar reuniÃµes:", error);
      setError("Falha ao carregar reuniÃµes. Tente novamente.");
    } finally {
      setIsLoading(false);
    }
  };

  // Fechar dropdown ao clicar fora
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setShowDropdown(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // FunÃ§Ã£o para login com Google
  const handleGoogleLogin = async () => {
    try {
      console.log("Iniciando login com Google...");

      // Configurar parÃ¢metros adicionais
      googleProvider.setCustomParameters({
        // ForÃ§ar seleÃ§Ã£o de conta sempre
        prompt: "select_account",
      });

      // Usar popup em vez de redirecionamento
      const result = await signInWithPopup(auth, googleProvider);
      console.log("Login com Google bem-sucedido!", result.user);
      setUser(result.user);

      // Carregar reuniÃµes apÃ³s login bem-sucedido
      await loadUserMeetings(result.user.uid);
    } catch (error) {
      console.error("Erro ao fazer login com Google:", error);

      // Mensagem de erro mais especÃ­fica para o usuÃ¡rio
      if (error.code === "auth/popup-blocked") {
        alert(
          "O popup de login foi bloqueado. Por favor, permita popups para este site."
        );
      } else if (error.code === "auth/popup-closed-by-user") {
        alert("VocÃª fechou a janela de login antes de concluir.");
      } else {
        alert(`Erro ao fazer login: ${error.message}`);
      }
    }
  };

  // FunÃ§Ã£o para logout
  const handleLogout = async () => {
    try {
      await signOut(auth);
      setShowDropdown(false);
      navigate("/");
    } catch (error) {
      console.error("Erro ao fazer logout:", error);
    }
  };

  // FunÃ§Ã£o para formatar o nome do usuÃ¡rio (pegar apenas o primeiro nome)
  const formatUserName = (fullName) => {
    if (!fullName) return "";
    const firstName = fullName.split(" ")[0];
    return firstName.charAt(0).toUpperCase() + firstName.slice(1);
  };

  // FunÃ§Ãµes para navegaÃ§Ã£o
  const handleCreateMeeting = () => {
    navigate("/create");
  };

  const handleEnterMeeting = () => {
    navigate("/enter");
  };

  const handleMeetingCreated = async (result) => {
    if (user) {
      await loadUserMeetings(user.uid); // Recarregar lista de reuniÃµes
      setActiveMeeting({
        id: result.id,
        pin: result.pin,
      });
      navigate(`/meeting/${result.id}`);
    }
  };

  const handleEnterMeetingComplete = (meeting) => {
    setActiveMeeting({
      id: meeting.id,
      pin: meeting.pin || null,
    });
    navigate(`/meeting/${meeting.id}`);
  };

  const handleSelectMeeting = (meeting) => {
    // Verificar se o usuÃ¡rio Ã© o proprietÃ¡rio da reuniÃ£o
    if (user && user.uid === meeting.createdBy) {
      // UsuÃ¡rio Ã© o dono, acesso direto
      setActiveMeeting({
        id: meeting.id,
        pin: meeting.pin || null,
      });
      navigate(`/meeting/${meeting.id}`);
    } else {
      // UsuÃ¡rio nÃ£o Ã© o dono, precisa fornecer PIN
      setActiveMeeting({
        id: meeting.id,
        requirePin: true,
        meeting: meeting,
      });
      navigate("/enter");
    }
  };

  const handleBackToHome = async () => {
    if (user) {
      await loadUserMeetings(user.uid); // Recarregar lista de reuniÃµes ao voltar
    }
    navigate("/app");
    setActiveMeeting(null);
  };

  // Handler para arquivar reuniÃ£o
  const handleArchiveMeeting = async (meeting) => {
    if (!user) return;

    try {
      await archiveMeeting(meeting.id, user.uid);
      // ApÃ³s arquivar, recarregar as reuniÃµes do usuÃ¡rio
      await loadUserMeetings(user.uid);
    } catch (error) {
      console.error("Erro ao arquivar reuniÃ£o:", error);
      alert("NÃ£o foi possÃ­vel arquivar a reuniÃ£o.");
    }
  };

  // FunÃ§Ã£o para carregar reuniÃµes arquivadas
  const handleViewArchivedMeetings = async () => {
    if (!user) return;

    try {
      setIsLoading(true);
      const archived = await getUserArchivedMeetings(user.uid);
      setArchivedMeetings(archived);
      setViewingArchived(true);
      navigate("/archived");
    } catch (error) {
      console.error("Erro ao carregar reuniÃµes arquivadas:", error);
      alert("NÃ£o foi possÃ­vel carregar as reuniÃµes arquivadas.");
    } finally {
      setIsLoading(false);
    }
  };

  // FunÃ§Ã£o para voltar Ã s reuniÃµes normais
  const handleBackToRegularMeetings = async () => {
    setViewingArchived(false);
    navigate("/app");
    if (user) {
      // Recarregar reuniÃµes normais para garantir atualizaÃ§Ã£o
      await loadUserMeetings(user.uid);
    }
  };

  const [sidebarOpen, setSidebarOpen] = useState(true);
  
  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };
  
  const isLandingPage = window.location.pathname === "/";

  return (
    <div
      className={`app-container ${
        isLandingPage ? "landing-page-active" : ""
      }`}
    >
      {!isLandingPage && (
        // Mostrar a topbar apenas quando nÃ£o estiver na landing page
        <div className="topbar">
          <div className="logo" onClick={() => navigate("/home")}>
            VotchÃª
          </div>
          {user ? (
            <div className="user-profile" ref={dropdownRef}>
              <div
                className="profile-container"
                onClick={() => setShowDropdown(!showDropdown)}
              >
                <img
                  src={user.photoURL}
                  alt="Foto de perfil"
                  className="profile-photo"
                />
                <span className="user-name">
                  {formatUserName(user.displayName)}
                </span>
              </div>
              {showDropdown && (
                <div className="profile-dropdown">
                  <button onClick={handleBackToHome} className="dropdown-item">
                    Minhas ReuniÃµes
                  </button>
                  <button onClick={handleLogout} className="dropdown-item">
                    Sair
                  </button>
                </div>
              )}
            </div>
          ) : (
            <div className="login-button" onClick={handleGoogleLogin}>
              <span className="user-icon">ðŸ‘¤</span>
              <span>Login</span>
            </div>
          )}
        </div>
      )}

      {!isLandingPage ? (
        <div className="app-layout">
          {/* Sidebar */}
          <Sidebar isOpen={sidebarOpen} toggleSidebar={toggleSidebar} />
          
          {/* Mobile sidebar toggle button */}
          <button 
            className="sidebar-toggle" 
            onClick={toggleSidebar}
            aria-label="Abrir menu lateral"
          >
            {sidebarOpen ? "Ã—" : "â˜°"}
          </button>

          {/* Main Content */}
          <div className="main-content">
            <Routes>
              <Route path="/home" element={
                <MeetingsList
                  user={user}
                  meetings={meetings}
                  isLoading={isLoading}
                  error={error}
                  onSelectMeeting={handleSelectMeeting}
                  onCreateNewMeeting={handleCreateMeeting}
                  onEnterMeeting={handleEnterMeeting}
                  onArchiveMeeting={handleArchiveMeeting}
                  onViewArchivedMeetings={handleViewArchivedMeetings}
                  onBackToRegular={handleBackToRegularMeetings}
                  viewingArchived={viewingArchived}
                  onLogin={handleGoogleLogin}
                />
              } />
              <Route path="/create-meeting" element={
                user ? (
                  <CreateMeeting
                    user={user}
                    onComplete={handleMeetingCreated}
                    onCancel={handleBackToHome}
                  />
                ) : (
                  <Navigate to="/home" replace />
                )
              } />
              <Route path="/enter-meeting" element={
                <EnterMeeting
                  user={user}
                  onComplete={handleEnterMeetingComplete}
                  onCancel={handleBackToHome}
                  activeMeeting={activeMeeting}
                />
              } />
              <Route path="/meeting/:id" element={
                <MeetingSession
                  meetingId={activeMeeting?.id}
                  user={user}
                  onBack={handleBackToHome}
                />
              } />
              <Route path="/archived-meetings" element={
                user ? (
                  <ArchivedMeetings
                    user={user}
                    onBack={handleBackToRegularMeetings}
                    onViewMeeting={handleSelectMeeting}
                  />
                ) : (
                  <Navigate to="/home" replace />
                )
              } />
              <Route path="/app" element={<Navigate to="/home" replace />} />
            </Routes>
          </div>
        </div>
      ) : (
        <div className="main-content">
          <Routes>
            <Route path="/" element={<LandingPage />} />
          </Routes>
        </div>
      )}
    </div>
  );
          <Route
            path="/create"
            element={
              user ? (
                <CreateMeeting
                  user={user}
                  onComplete={handleMeetingCreated}
                  onCancel={handleBackToHome}
                />
              ) : (
                <Navigate to="/app" replace />
              )
            }
          />
          <Route
            path="/enter"
            element={
              <EnterMeeting
                user={user}
                onComplete={handleEnterMeetingComplete}
                onCancel={handleBackToHome}
                activeMeeting={activeMeeting}
              />
            }
          />
          <Route
            path="/meeting/:id"
            element={
              <MeetingSession
                meetingId={activeMeeting?.id}
                user={user}
                onBack={handleBackToHome}
              />
            }
          />
          <Route
            path="/archived"
            element={
              user ? (
                <ArchivedMeetings
                  user={user}
                  onBack={handleBackToRegularMeetings}
                  onViewMeeting={handleSelectMeeting}
                />
              ) : (
                <Navigate to="/app" replace />
              )
            }
          />
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </div>
    </div>
  );
}

export default App;
